/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Account {
  accessToken: string | null;
  accessTokenExpiresAt: Timestamp | null;
  accountId: string;
  createdAt: Timestamp;
  id: string;
  idToken: string | null;
  password: string | null;
  providerId: string;
  refreshToken: string | null;
  refreshTokenExpiresAt: Timestamp | null;
  scope: string | null;
  updatedAt: Timestamp;
  userId: string;
}

export interface Apikey {
  createdAt: Timestamp;
  enabled: boolean | null;
  expiresAt: Timestamp | null;
  id: string;
  key: string;
  lastRefillAt: Timestamp | null;
  lastRequest: Timestamp | null;
  metadata: string | null;
  name: string | null;
  permissions: string | null;
  prefix: string | null;
  rateLimitEnabled: boolean | null;
  rateLimitMax: number | null;
  rateLimitTimeWindow: number | null;
  refillAmount: number | null;
  refillInterval: number | null;
  remaining: number | null;
  requestCount: number | null;
  start: string | null;
  updatedAt: Timestamp;
  userId: string;
}

export interface ChatCompletion {
  completionTokens: number;
  createdAt: Generated<Timestamp>;
  credit: Generated<number>;
  id: Generated<number>;
  modelId: string;
  promptTokens: number;
  userId: string;
}

export interface Clip {
  createdAt: Generated<Timestamp>;
  data: Json;
  id: Generated<number>;
  updatedAt: Generated<Timestamp>;
}

export interface ExternalIntegration {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  updatedAt: Generated<Timestamp>;
  userId: string;
  vendorData: Json;
}

export interface Invitation {
  email: string;
  expiresAt: Timestamp;
  id: string;
  inviterId: string;
  organizationId: string;
  role: string | null;
  status: string;
}

export interface Member {
  createdAt: Timestamp;
  id: string;
  organizationId: string;
  role: string;
  userId: string;
}

export interface Minion {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  sandboxId: string | null;
  updatedAt: Generated<Timestamp>;
  url: string | null;
  userId: string;
}

export interface MonthlyCodeCompletionUsage {
  count: Generated<number>;
  id: Generated<number>;
  startDayOfMonth: Timestamp;
  userId: string;
}

export interface MonthlyCreditLimit {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  limit: number;
  updatedAt: Generated<Timestamp>;
  userId: string;
}

export interface MonthlyOrganizationCreditLimit {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  limit: number;
  organizationId: string;
  updatedAt: Generated<Timestamp>;
}

export interface MonthlyOrganizationUsage {
  count: Generated<number>;
  credit: Generated<number>;
  id: Generated<number>;
  modelId: string;
  organizationId: string;
  startDayOfMonth: Timestamp;
  userId: string;
}

export interface MonthlyUsage {
  count: Generated<number>;
  credit: Generated<number>;
  id: Generated<number>;
  modelId: string;
  startDayOfMonth: Timestamp;
  userId: string;
}

export interface Organization {
  createdAt: Timestamp;
  id: string;
  logo: string | null;
  metadata: string | null;
  name: string;
  slug: string;
}

export interface Session {
  activeOrganizationId: string | null;
  createdAt: Timestamp;
  expiresAt: Timestamp;
  id: string;
  impersonatedBy: string | null;
  ipAddress: string | null;
  token: string;
  updatedAt: Timestamp;
  userAgent: string | null;
  userId: string;
}

export interface SlackConnect {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  updatedAt: Generated<Timestamp>;
  userId: string;
  vendorIntegrationId: string;
}

export interface Subscription {
  cancelAtPeriodEnd: boolean | null;
  id: string;
  periodEnd: Timestamp | null;
  periodStart: Timestamp | null;
  plan: string;
  referenceId: string;
  seats: number | null;
  status: string;
  stripeCustomerId: string | null;
  stripeSubscriptionId: string | null;
}

export interface Task {
  conversation: Json | null;
  createdAt: Generated<Timestamp>;
  environment: Json | null;
  error: Json | null;
  event: Json | null;
  id: Generated<number>;
  isDeleted: Generated<boolean>;
  isPublicShared: Generated<boolean>;
  minionId: number | null;
  parentId: number | null;
  status: Generated<string>;
  streamIds: string[] | null;
  taskId: number;
  title: string | null;
  totalTokens: number | null;
  updatedAt: Generated<Timestamp>;
  userId: string;
}

export interface TaskSequence {
  id: Generated<number>;
  nextTaskId: Generated<number>;
  userId: string;
}

export interface User {
  banExpires: Timestamp | null;
  banned: boolean | null;
  banReason: string | null;
  createdAt: Timestamp;
  email: string;
  emailVerified: boolean;
  id: string;
  image: string | null;
  isWaitlistApproved: Generated<boolean | null>;
  name: string;
  role: string | null;
  stripeCustomerId: string | null;
  updatedAt: Timestamp;
}

export interface Verification {
  createdAt: Timestamp | null;
  expiresAt: Timestamp;
  id: string;
  identifier: string;
  updatedAt: Timestamp | null;
  value: string;
}

export interface DB {
  account: Account;
  apikey: Apikey;
  chatCompletion: ChatCompletion;
  clip: Clip;
  externalIntegration: ExternalIntegration;
  invitation: Invitation;
  member: Member;
  minion: Minion;
  monthlyCodeCompletionUsage: MonthlyCodeCompletionUsage;
  monthlyCreditLimit: MonthlyCreditLimit;
  monthlyOrganizationCreditLimit: MonthlyOrganizationCreditLimit;
  monthlyOrganizationUsage: MonthlyOrganizationUsage;
  monthlyUsage: MonthlyUsage;
  organization: Organization;
  session: Session;
  slackConnect: SlackConnect;
  subscription: Subscription;
  task: Task;
  taskSequence: TaskSequence;
  user: User;
  verification: Verification;
}
