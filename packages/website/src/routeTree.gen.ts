/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings/route'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsUsageImport } from './routes/settings/usage'
import { Route as SettingsBillingImport } from './routes/settings/billing'
import { Route as SettingsAccountImport } from './routes/settings/account'
import { Route as AuthPathnameImport } from './routes/auth/$pathname'

// Create/Update Routes

const SettingsRouteRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsUsageRoute = SettingsUsageImport.update({
  id: '/usage',
  path: '/usage',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const SettingsBillingRoute = SettingsBillingImport.update({
  id: '/billing',
  path: '/billing',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const SettingsAccountRoute = SettingsAccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const AuthPathnameRoute = AuthPathnameImport.update({
  id: '/auth/$pathname',
  path: '/auth/$pathname',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRoute
    }
    '/auth/$pathname': {
      id: '/auth/$pathname'
      path: '/auth/$pathname'
      fullPath: '/auth/$pathname'
      preLoaderRoute: typeof AuthPathnameImport
      parentRoute: typeof rootRoute
    }
    '/settings/account': {
      id: '/settings/account'
      path: '/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof SettingsAccountImport
      parentRoute: typeof SettingsRouteImport
    }
    '/settings/billing': {
      id: '/settings/billing'
      path: '/billing'
      fullPath: '/settings/billing'
      preLoaderRoute: typeof SettingsBillingImport
      parentRoute: typeof SettingsRouteImport
    }
    '/settings/usage': {
      id: '/settings/usage'
      path: '/usage'
      fullPath: '/settings/usage'
      preLoaderRoute: typeof SettingsUsageImport
      parentRoute: typeof SettingsRouteImport
    }
  }
}

// Create and export the route tree

interface SettingsRouteRouteChildren {
  SettingsAccountRoute: typeof SettingsAccountRoute
  SettingsBillingRoute: typeof SettingsBillingRoute
  SettingsUsageRoute: typeof SettingsUsageRoute
}

const SettingsRouteRouteChildren: SettingsRouteRouteChildren = {
  SettingsAccountRoute: SettingsAccountRoute,
  SettingsBillingRoute: SettingsBillingRoute,
  SettingsUsageRoute: SettingsUsageRoute,
}

const SettingsRouteRouteWithChildren = SettingsRouteRoute._addFileChildren(
  SettingsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/auth/$pathname': typeof AuthPathnameRoute
  '/settings/account': typeof SettingsAccountRoute
  '/settings/billing': typeof SettingsBillingRoute
  '/settings/usage': typeof SettingsUsageRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/auth/$pathname': typeof AuthPathnameRoute
  '/settings/account': typeof SettingsAccountRoute
  '/settings/billing': typeof SettingsBillingRoute
  '/settings/usage': typeof SettingsUsageRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/auth/$pathname': typeof AuthPathnameRoute
  '/settings/account': typeof SettingsAccountRoute
  '/settings/billing': typeof SettingsBillingRoute
  '/settings/usage': typeof SettingsUsageRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/auth/$pathname'
    | '/settings/account'
    | '/settings/billing'
    | '/settings/usage'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/settings'
    | '/auth/$pathname'
    | '/settings/account'
    | '/settings/billing'
    | '/settings/usage'
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/auth/$pathname'
    | '/settings/account'
    | '/settings/billing'
    | '/settings/usage'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRouteRoute: typeof SettingsRouteRouteWithChildren
  AuthPathnameRoute: typeof AuthPathnameRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRouteRoute: SettingsRouteRouteWithChildren,
  AuthPathnameRoute: AuthPathnameRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/settings",
        "/auth/$pathname"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/settings": {
      "filePath": "settings/route.tsx",
      "children": [
        "/settings/account",
        "/settings/billing",
        "/settings/usage"
      ]
    },
    "/auth/$pathname": {
      "filePath": "auth/$pathname.tsx"
    },
    "/settings/account": {
      "filePath": "settings/account.tsx",
      "parent": "/settings"
    },
    "/settings/billing": {
      "filePath": "settings/billing.tsx",
      "parent": "/settings"
    },
    "/settings/usage": {
      "filePath": "settings/usage.tsx",
      "parent": "/settings"
    }
  }
}
ROUTE_MANIFEST_END */
