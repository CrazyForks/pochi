/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermOfServiceImport } from './routes/term-of-service'
import { Route as RedirectUrlImport } from './routes/redirect-url'
import { Route as PrivacyPolicyImport } from './routes/privacy-policy'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as ShareUidImport } from './routes/share.$uid'
import { Route as ClipNewImport } from './routes/clip/new'
import { Route as ClipIdImport } from './routes/clip/$id'
import { Route as AuthPathnameImport } from './routes/auth/$pathname'
import { Route as AuthenticatedStopImpersonatingImport } from './routes/_authenticated.stop-impersonating'
import { Route as AuthenticatedRedirectVscodeImport } from './routes/_authenticated.redirect-vscode'
import { Route as AuthenticatedRedirectRemoteImport } from './routes/_authenticated.redirect-remote'
import { Route as AuthenticatedAcceptInvitationImport } from './routes/_authenticated.accept-invitation'
import { Route as AuthenticatedAdminRouteImport } from './routes/_authenticated.admin/route'
import { Route as AuthenticatedBaseRouteImport } from './routes/_authenticated._base/route'
import { Route as AuthenticatedAuthVscodeLinkImport } from './routes/_authenticated.auth/vscode-link'
import { Route as AuthenticatedAuthDeviceLinkImport } from './routes/_authenticated.auth/device-link'
import { Route as AuthenticatedAdminUsersImport } from './routes/_authenticated.admin/users'
import { Route as AuthenticatedAdminModelEvaluationImport } from './routes/_authenticated.admin/model-evaluation'
import { Route as AuthenticatedBaseTeamImport } from './routes/_authenticated._base/team'
import { Route as AuthenticatedBaseProfileImport } from './routes/_authenticated._base/profile'
import { Route as AuthenticatedBaseLeaderboardImport } from './routes/_authenticated._base/leaderboard'
import { Route as AuthenticatedBaseHomeImport } from './routes/_authenticated._base/home'
import { Route as AuthenticatedBaseCreateImport } from './routes/_authenticated._base/create'
import { Route as AuthenticatedBaseSettingsRouteImport } from './routes/_authenticated._base/_settings/route'
import { Route as AuthenticatedBaseTasksIndexImport } from './routes/_authenticated._base/tasks/index'
import { Route as AuthenticatedBaseMinionsIndexImport } from './routes/_authenticated._base/minions/index'
import { Route as AuthenticatedBaseTeamsSlugImport } from './routes/_authenticated._base/teams/$slug'
import { Route as AuthenticatedBaseTasksUidImport } from './routes/_authenticated._base/tasks/$uid'
import { Route as AuthenticatedBaseSettingsModelImport } from './routes/_authenticated._base/_settings/model'
import { Route as AuthenticatedBaseSettingsIntegrationsImport } from './routes/_authenticated._base/_settings/integrations'
import { Route as AuthenticatedBaseSettingsBillingImport } from './routes/_authenticated._base/_settings/billing'
import { Route as AuthenticatedBaseSettingsAccountImport } from './routes/_authenticated._base/_settings/account'

// Create/Update Routes

const TermOfServiceRoute = TermOfServiceImport.update({
  id: '/term-of-service',
  path: '/term-of-service',
  getParentRoute: () => rootRoute,
} as any)

const RedirectUrlRoute = RedirectUrlImport.update({
  id: '/redirect-url',
  path: '/redirect-url',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyPolicyRoute = PrivacyPolicyImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ShareUidRoute = ShareUidImport.update({
  id: '/share/$uid',
  path: '/share/$uid',
  getParentRoute: () => rootRoute,
} as any)

const ClipNewRoute = ClipNewImport.update({
  id: '/clip/new',
  path: '/clip/new',
  getParentRoute: () => rootRoute,
} as any)

const ClipIdRoute = ClipIdImport.update({
  id: '/clip/$id',
  path: '/clip/$id',
  getParentRoute: () => rootRoute,
} as any)

const AuthPathnameRoute = AuthPathnameImport.update({
  id: '/auth/$pathname',
  path: '/auth/$pathname',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedStopImpersonatingRoute =
  AuthenticatedStopImpersonatingImport.update({
    id: '/stop-impersonating',
    path: '/stop-impersonating',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedRedirectVscodeRoute =
  AuthenticatedRedirectVscodeImport.update({
    id: '/redirect-vscode',
    path: '/redirect-vscode',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedRedirectRemoteRoute =
  AuthenticatedRedirectRemoteImport.update({
    id: '/redirect-remote',
    path: '/redirect-remote',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedAcceptInvitationRoute =
  AuthenticatedAcceptInvitationImport.update({
    id: '/accept-invitation',
    path: '/accept-invitation',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedAdminRouteRoute = AuthenticatedAdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedBaseRouteRoute = AuthenticatedBaseRouteImport.update({
  id: '/_base',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedAuthVscodeLinkRoute =
  AuthenticatedAuthVscodeLinkImport.update({
    id: '/auth/vscode-link',
    path: '/auth/vscode-link',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedAuthDeviceLinkRoute =
  AuthenticatedAuthDeviceLinkImport.update({
    id: '/auth/device-link',
    path: '/auth/device-link',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedAdminUsersRoute = AuthenticatedAdminUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthenticatedAdminRouteRoute,
} as any)

const AuthenticatedAdminModelEvaluationRoute =
  AuthenticatedAdminModelEvaluationImport.update({
    id: '/model-evaluation',
    path: '/model-evaluation',
    getParentRoute: () => AuthenticatedAdminRouteRoute,
  } as any)

const AuthenticatedBaseTeamRoute = AuthenticatedBaseTeamImport.update({
  id: '/team',
  path: '/team',
  getParentRoute: () => AuthenticatedBaseRouteRoute,
} as any)

const AuthenticatedBaseProfileRoute = AuthenticatedBaseProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedBaseRouteRoute,
} as any)

const AuthenticatedBaseLeaderboardRoute =
  AuthenticatedBaseLeaderboardImport.update({
    id: '/leaderboard',
    path: '/leaderboard',
    getParentRoute: () => AuthenticatedBaseRouteRoute,
  } as any)

const AuthenticatedBaseHomeRoute = AuthenticatedBaseHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AuthenticatedBaseRouteRoute,
} as any)

const AuthenticatedBaseCreateRoute = AuthenticatedBaseCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => AuthenticatedBaseRouteRoute,
} as any)

const AuthenticatedBaseSettingsRouteRoute =
  AuthenticatedBaseSettingsRouteImport.update({
    id: '/_settings',
    getParentRoute: () => AuthenticatedBaseRouteRoute,
  } as any)

const AuthenticatedBaseTasksIndexRoute =
  AuthenticatedBaseTasksIndexImport.update({
    id: '/tasks/',
    path: '/tasks/',
    getParentRoute: () => AuthenticatedBaseRouteRoute,
  } as any)

const AuthenticatedBaseMinionsIndexRoute =
  AuthenticatedBaseMinionsIndexImport.update({
    id: '/minions/',
    path: '/minions/',
    getParentRoute: () => AuthenticatedBaseRouteRoute,
  } as any)

const AuthenticatedBaseTeamsSlugRoute = AuthenticatedBaseTeamsSlugImport.update(
  {
    id: '/teams/$slug',
    path: '/teams/$slug',
    getParentRoute: () => AuthenticatedBaseRouteRoute,
  } as any,
)

const AuthenticatedBaseTasksUidRoute = AuthenticatedBaseTasksUidImport.update({
  id: '/tasks/$uid',
  path: '/tasks/$uid',
  getParentRoute: () => AuthenticatedBaseRouteRoute,
} as any)

const AuthenticatedBaseSettingsModelRoute =
  AuthenticatedBaseSettingsModelImport.update({
    id: '/model',
    path: '/model',
    getParentRoute: () => AuthenticatedBaseSettingsRouteRoute,
  } as any)

const AuthenticatedBaseSettingsIntegrationsRoute =
  AuthenticatedBaseSettingsIntegrationsImport.update({
    id: '/integrations',
    path: '/integrations',
    getParentRoute: () => AuthenticatedBaseSettingsRouteRoute,
  } as any)

const AuthenticatedBaseSettingsBillingRoute =
  AuthenticatedBaseSettingsBillingImport.update({
    id: '/billing',
    path: '/billing',
    getParentRoute: () => AuthenticatedBaseSettingsRouteRoute,
  } as any)

const AuthenticatedBaseSettingsAccountRoute =
  AuthenticatedBaseSettingsAccountImport.update({
    id: '/account',
    path: '/account',
    getParentRoute: () => AuthenticatedBaseSettingsRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyImport
      parentRoute: typeof rootRoute
    }
    '/redirect-url': {
      id: '/redirect-url'
      path: '/redirect-url'
      fullPath: '/redirect-url'
      preLoaderRoute: typeof RedirectUrlImport
      parentRoute: typeof rootRoute
    }
    '/term-of-service': {
      id: '/term-of-service'
      path: '/term-of-service'
      fullPath: '/term-of-service'
      preLoaderRoute: typeof TermOfServiceImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/_base': {
      id: '/_authenticated/_base'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedBaseRouteImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/admin': {
      id: '/_authenticated/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AuthenticatedAdminRouteImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/accept-invitation': {
      id: '/_authenticated/accept-invitation'
      path: '/accept-invitation'
      fullPath: '/accept-invitation'
      preLoaderRoute: typeof AuthenticatedAcceptInvitationImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/redirect-remote': {
      id: '/_authenticated/redirect-remote'
      path: '/redirect-remote'
      fullPath: '/redirect-remote'
      preLoaderRoute: typeof AuthenticatedRedirectRemoteImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/redirect-vscode': {
      id: '/_authenticated/redirect-vscode'
      path: '/redirect-vscode'
      fullPath: '/redirect-vscode'
      preLoaderRoute: typeof AuthenticatedRedirectVscodeImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/stop-impersonating': {
      id: '/_authenticated/stop-impersonating'
      path: '/stop-impersonating'
      fullPath: '/stop-impersonating'
      preLoaderRoute: typeof AuthenticatedStopImpersonatingImport
      parentRoute: typeof AuthenticatedImport
    }
    '/auth/$pathname': {
      id: '/auth/$pathname'
      path: '/auth/$pathname'
      fullPath: '/auth/$pathname'
      preLoaderRoute: typeof AuthPathnameImport
      parentRoute: typeof rootRoute
    }
    '/clip/$id': {
      id: '/clip/$id'
      path: '/clip/$id'
      fullPath: '/clip/$id'
      preLoaderRoute: typeof ClipIdImport
      parentRoute: typeof rootRoute
    }
    '/clip/new': {
      id: '/clip/new'
      path: '/clip/new'
      fullPath: '/clip/new'
      preLoaderRoute: typeof ClipNewImport
      parentRoute: typeof rootRoute
    }
    '/share/$uid': {
      id: '/share/$uid'
      path: '/share/$uid'
      fullPath: '/share/$uid'
      preLoaderRoute: typeof ShareUidImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/_base/_settings': {
      id: '/_authenticated/_base/_settings'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedBaseSettingsRouteImport
      parentRoute: typeof AuthenticatedBaseRouteImport
    }
    '/_authenticated/_base/create': {
      id: '/_authenticated/_base/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof AuthenticatedBaseCreateImport
      parentRoute: typeof AuthenticatedBaseRouteImport
    }
    '/_authenticated/_base/home': {
      id: '/_authenticated/_base/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AuthenticatedBaseHomeImport
      parentRoute: typeof AuthenticatedBaseRouteImport
    }
    '/_authenticated/_base/leaderboard': {
      id: '/_authenticated/_base/leaderboard'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof AuthenticatedBaseLeaderboardImport
      parentRoute: typeof AuthenticatedBaseRouteImport
    }
    '/_authenticated/_base/profile': {
      id: '/_authenticated/_base/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedBaseProfileImport
      parentRoute: typeof AuthenticatedBaseRouteImport
    }
    '/_authenticated/_base/team': {
      id: '/_authenticated/_base/team'
      path: '/team'
      fullPath: '/team'
      preLoaderRoute: typeof AuthenticatedBaseTeamImport
      parentRoute: typeof AuthenticatedBaseRouteImport
    }
    '/_authenticated/admin/model-evaluation': {
      id: '/_authenticated/admin/model-evaluation'
      path: '/model-evaluation'
      fullPath: '/admin/model-evaluation'
      preLoaderRoute: typeof AuthenticatedAdminModelEvaluationImport
      parentRoute: typeof AuthenticatedAdminRouteImport
    }
    '/_authenticated/admin/users': {
      id: '/_authenticated/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AuthenticatedAdminUsersImport
      parentRoute: typeof AuthenticatedAdminRouteImport
    }
    '/_authenticated/auth/device-link': {
      id: '/_authenticated/auth/device-link'
      path: '/auth/device-link'
      fullPath: '/auth/device-link'
      preLoaderRoute: typeof AuthenticatedAuthDeviceLinkImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/auth/vscode-link': {
      id: '/_authenticated/auth/vscode-link'
      path: '/auth/vscode-link'
      fullPath: '/auth/vscode-link'
      preLoaderRoute: typeof AuthenticatedAuthVscodeLinkImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/_base/_settings/account': {
      id: '/_authenticated/_base/_settings/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AuthenticatedBaseSettingsAccountImport
      parentRoute: typeof AuthenticatedBaseSettingsRouteImport
    }
    '/_authenticated/_base/_settings/billing': {
      id: '/_authenticated/_base/_settings/billing'
      path: '/billing'
      fullPath: '/billing'
      preLoaderRoute: typeof AuthenticatedBaseSettingsBillingImport
      parentRoute: typeof AuthenticatedBaseSettingsRouteImport
    }
    '/_authenticated/_base/_settings/integrations': {
      id: '/_authenticated/_base/_settings/integrations'
      path: '/integrations'
      fullPath: '/integrations'
      preLoaderRoute: typeof AuthenticatedBaseSettingsIntegrationsImport
      parentRoute: typeof AuthenticatedBaseSettingsRouteImport
    }
    '/_authenticated/_base/_settings/model': {
      id: '/_authenticated/_base/_settings/model'
      path: '/model'
      fullPath: '/model'
      preLoaderRoute: typeof AuthenticatedBaseSettingsModelImport
      parentRoute: typeof AuthenticatedBaseSettingsRouteImport
    }
    '/_authenticated/_base/tasks/$uid': {
      id: '/_authenticated/_base/tasks/$uid'
      path: '/tasks/$uid'
      fullPath: '/tasks/$uid'
      preLoaderRoute: typeof AuthenticatedBaseTasksUidImport
      parentRoute: typeof AuthenticatedBaseRouteImport
    }
    '/_authenticated/_base/teams/$slug': {
      id: '/_authenticated/_base/teams/$slug'
      path: '/teams/$slug'
      fullPath: '/teams/$slug'
      preLoaderRoute: typeof AuthenticatedBaseTeamsSlugImport
      parentRoute: typeof AuthenticatedBaseRouteImport
    }
    '/_authenticated/_base/minions/': {
      id: '/_authenticated/_base/minions/'
      path: '/minions'
      fullPath: '/minions'
      preLoaderRoute: typeof AuthenticatedBaseMinionsIndexImport
      parentRoute: typeof AuthenticatedBaseRouteImport
    }
    '/_authenticated/_base/tasks/': {
      id: '/_authenticated/_base/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof AuthenticatedBaseTasksIndexImport
      parentRoute: typeof AuthenticatedBaseRouteImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedBaseSettingsRouteRouteChildren {
  AuthenticatedBaseSettingsAccountRoute: typeof AuthenticatedBaseSettingsAccountRoute
  AuthenticatedBaseSettingsBillingRoute: typeof AuthenticatedBaseSettingsBillingRoute
  AuthenticatedBaseSettingsIntegrationsRoute: typeof AuthenticatedBaseSettingsIntegrationsRoute
  AuthenticatedBaseSettingsModelRoute: typeof AuthenticatedBaseSettingsModelRoute
}

const AuthenticatedBaseSettingsRouteRouteChildren: AuthenticatedBaseSettingsRouteRouteChildren =
  {
    AuthenticatedBaseSettingsAccountRoute:
      AuthenticatedBaseSettingsAccountRoute,
    AuthenticatedBaseSettingsBillingRoute:
      AuthenticatedBaseSettingsBillingRoute,
    AuthenticatedBaseSettingsIntegrationsRoute:
      AuthenticatedBaseSettingsIntegrationsRoute,
    AuthenticatedBaseSettingsModelRoute: AuthenticatedBaseSettingsModelRoute,
  }

const AuthenticatedBaseSettingsRouteRouteWithChildren =
  AuthenticatedBaseSettingsRouteRoute._addFileChildren(
    AuthenticatedBaseSettingsRouteRouteChildren,
  )

interface AuthenticatedBaseRouteRouteChildren {
  AuthenticatedBaseSettingsRouteRoute: typeof AuthenticatedBaseSettingsRouteRouteWithChildren
  AuthenticatedBaseCreateRoute: typeof AuthenticatedBaseCreateRoute
  AuthenticatedBaseHomeRoute: typeof AuthenticatedBaseHomeRoute
  AuthenticatedBaseLeaderboardRoute: typeof AuthenticatedBaseLeaderboardRoute
  AuthenticatedBaseProfileRoute: typeof AuthenticatedBaseProfileRoute
  AuthenticatedBaseTeamRoute: typeof AuthenticatedBaseTeamRoute
  AuthenticatedBaseTasksUidRoute: typeof AuthenticatedBaseTasksUidRoute
  AuthenticatedBaseTeamsSlugRoute: typeof AuthenticatedBaseTeamsSlugRoute
  AuthenticatedBaseMinionsIndexRoute: typeof AuthenticatedBaseMinionsIndexRoute
  AuthenticatedBaseTasksIndexRoute: typeof AuthenticatedBaseTasksIndexRoute
}

const AuthenticatedBaseRouteRouteChildren: AuthenticatedBaseRouteRouteChildren =
  {
    AuthenticatedBaseSettingsRouteRoute:
      AuthenticatedBaseSettingsRouteRouteWithChildren,
    AuthenticatedBaseCreateRoute: AuthenticatedBaseCreateRoute,
    AuthenticatedBaseHomeRoute: AuthenticatedBaseHomeRoute,
    AuthenticatedBaseLeaderboardRoute: AuthenticatedBaseLeaderboardRoute,
    AuthenticatedBaseProfileRoute: AuthenticatedBaseProfileRoute,
    AuthenticatedBaseTeamRoute: AuthenticatedBaseTeamRoute,
    AuthenticatedBaseTasksUidRoute: AuthenticatedBaseTasksUidRoute,
    AuthenticatedBaseTeamsSlugRoute: AuthenticatedBaseTeamsSlugRoute,
    AuthenticatedBaseMinionsIndexRoute: AuthenticatedBaseMinionsIndexRoute,
    AuthenticatedBaseTasksIndexRoute: AuthenticatedBaseTasksIndexRoute,
  }

const AuthenticatedBaseRouteRouteWithChildren =
  AuthenticatedBaseRouteRoute._addFileChildren(
    AuthenticatedBaseRouteRouteChildren,
  )

interface AuthenticatedAdminRouteRouteChildren {
  AuthenticatedAdminModelEvaluationRoute: typeof AuthenticatedAdminModelEvaluationRoute
  AuthenticatedAdminUsersRoute: typeof AuthenticatedAdminUsersRoute
}

const AuthenticatedAdminRouteRouteChildren: AuthenticatedAdminRouteRouteChildren =
  {
    AuthenticatedAdminModelEvaluationRoute:
      AuthenticatedAdminModelEvaluationRoute,
    AuthenticatedAdminUsersRoute: AuthenticatedAdminUsersRoute,
  }

const AuthenticatedAdminRouteRouteWithChildren =
  AuthenticatedAdminRouteRoute._addFileChildren(
    AuthenticatedAdminRouteRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedBaseRouteRoute: typeof AuthenticatedBaseRouteRouteWithChildren
  AuthenticatedAdminRouteRoute: typeof AuthenticatedAdminRouteRouteWithChildren
  AuthenticatedAcceptInvitationRoute: typeof AuthenticatedAcceptInvitationRoute
  AuthenticatedRedirectRemoteRoute: typeof AuthenticatedRedirectRemoteRoute
  AuthenticatedRedirectVscodeRoute: typeof AuthenticatedRedirectVscodeRoute
  AuthenticatedStopImpersonatingRoute: typeof AuthenticatedStopImpersonatingRoute
  AuthenticatedAuthDeviceLinkRoute: typeof AuthenticatedAuthDeviceLinkRoute
  AuthenticatedAuthVscodeLinkRoute: typeof AuthenticatedAuthVscodeLinkRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedBaseRouteRoute: AuthenticatedBaseRouteRouteWithChildren,
  AuthenticatedAdminRouteRoute: AuthenticatedAdminRouteRouteWithChildren,
  AuthenticatedAcceptInvitationRoute: AuthenticatedAcceptInvitationRoute,
  AuthenticatedRedirectRemoteRoute: AuthenticatedRedirectRemoteRoute,
  AuthenticatedRedirectVscodeRoute: AuthenticatedRedirectVscodeRoute,
  AuthenticatedStopImpersonatingRoute: AuthenticatedStopImpersonatingRoute,
  AuthenticatedAuthDeviceLinkRoute: AuthenticatedAuthDeviceLinkRoute,
  AuthenticatedAuthVscodeLinkRoute: AuthenticatedAuthVscodeLinkRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedBaseSettingsRouteRouteWithChildren
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/redirect-url': typeof RedirectUrlRoute
  '/term-of-service': typeof TermOfServiceRoute
  '/admin': typeof AuthenticatedAdminRouteRouteWithChildren
  '/accept-invitation': typeof AuthenticatedAcceptInvitationRoute
  '/redirect-remote': typeof AuthenticatedRedirectRemoteRoute
  '/redirect-vscode': typeof AuthenticatedRedirectVscodeRoute
  '/stop-impersonating': typeof AuthenticatedStopImpersonatingRoute
  '/auth/$pathname': typeof AuthPathnameRoute
  '/clip/$id': typeof ClipIdRoute
  '/clip/new': typeof ClipNewRoute
  '/share/$uid': typeof ShareUidRoute
  '/create': typeof AuthenticatedBaseCreateRoute
  '/home': typeof AuthenticatedBaseHomeRoute
  '/leaderboard': typeof AuthenticatedBaseLeaderboardRoute
  '/profile': typeof AuthenticatedBaseProfileRoute
  '/team': typeof AuthenticatedBaseTeamRoute
  '/admin/model-evaluation': typeof AuthenticatedAdminModelEvaluationRoute
  '/admin/users': typeof AuthenticatedAdminUsersRoute
  '/auth/device-link': typeof AuthenticatedAuthDeviceLinkRoute
  '/auth/vscode-link': typeof AuthenticatedAuthVscodeLinkRoute
  '/account': typeof AuthenticatedBaseSettingsAccountRoute
  '/billing': typeof AuthenticatedBaseSettingsBillingRoute
  '/integrations': typeof AuthenticatedBaseSettingsIntegrationsRoute
  '/model': typeof AuthenticatedBaseSettingsModelRoute
  '/tasks/$uid': typeof AuthenticatedBaseTasksUidRoute
  '/teams/$slug': typeof AuthenticatedBaseTeamsSlugRoute
  '/minions': typeof AuthenticatedBaseMinionsIndexRoute
  '/tasks': typeof AuthenticatedBaseTasksIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedBaseSettingsRouteRouteWithChildren
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/redirect-url': typeof RedirectUrlRoute
  '/term-of-service': typeof TermOfServiceRoute
  '/admin': typeof AuthenticatedAdminRouteRouteWithChildren
  '/accept-invitation': typeof AuthenticatedAcceptInvitationRoute
  '/redirect-remote': typeof AuthenticatedRedirectRemoteRoute
  '/redirect-vscode': typeof AuthenticatedRedirectVscodeRoute
  '/stop-impersonating': typeof AuthenticatedStopImpersonatingRoute
  '/auth/$pathname': typeof AuthPathnameRoute
  '/clip/$id': typeof ClipIdRoute
  '/clip/new': typeof ClipNewRoute
  '/share/$uid': typeof ShareUidRoute
  '/create': typeof AuthenticatedBaseCreateRoute
  '/home': typeof AuthenticatedBaseHomeRoute
  '/leaderboard': typeof AuthenticatedBaseLeaderboardRoute
  '/profile': typeof AuthenticatedBaseProfileRoute
  '/team': typeof AuthenticatedBaseTeamRoute
  '/admin/model-evaluation': typeof AuthenticatedAdminModelEvaluationRoute
  '/admin/users': typeof AuthenticatedAdminUsersRoute
  '/auth/device-link': typeof AuthenticatedAuthDeviceLinkRoute
  '/auth/vscode-link': typeof AuthenticatedAuthVscodeLinkRoute
  '/account': typeof AuthenticatedBaseSettingsAccountRoute
  '/billing': typeof AuthenticatedBaseSettingsBillingRoute
  '/integrations': typeof AuthenticatedBaseSettingsIntegrationsRoute
  '/model': typeof AuthenticatedBaseSettingsModelRoute
  '/tasks/$uid': typeof AuthenticatedBaseTasksUidRoute
  '/teams/$slug': typeof AuthenticatedBaseTeamsSlugRoute
  '/minions': typeof AuthenticatedBaseMinionsIndexRoute
  '/tasks': typeof AuthenticatedBaseTasksIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/redirect-url': typeof RedirectUrlRoute
  '/term-of-service': typeof TermOfServiceRoute
  '/_authenticated/_base': typeof AuthenticatedBaseRouteRouteWithChildren
  '/_authenticated/admin': typeof AuthenticatedAdminRouteRouteWithChildren
  '/_authenticated/accept-invitation': typeof AuthenticatedAcceptInvitationRoute
  '/_authenticated/redirect-remote': typeof AuthenticatedRedirectRemoteRoute
  '/_authenticated/redirect-vscode': typeof AuthenticatedRedirectVscodeRoute
  '/_authenticated/stop-impersonating': typeof AuthenticatedStopImpersonatingRoute
  '/auth/$pathname': typeof AuthPathnameRoute
  '/clip/$id': typeof ClipIdRoute
  '/clip/new': typeof ClipNewRoute
  '/share/$uid': typeof ShareUidRoute
  '/_authenticated/_base/_settings': typeof AuthenticatedBaseSettingsRouteRouteWithChildren
  '/_authenticated/_base/create': typeof AuthenticatedBaseCreateRoute
  '/_authenticated/_base/home': typeof AuthenticatedBaseHomeRoute
  '/_authenticated/_base/leaderboard': typeof AuthenticatedBaseLeaderboardRoute
  '/_authenticated/_base/profile': typeof AuthenticatedBaseProfileRoute
  '/_authenticated/_base/team': typeof AuthenticatedBaseTeamRoute
  '/_authenticated/admin/model-evaluation': typeof AuthenticatedAdminModelEvaluationRoute
  '/_authenticated/admin/users': typeof AuthenticatedAdminUsersRoute
  '/_authenticated/auth/device-link': typeof AuthenticatedAuthDeviceLinkRoute
  '/_authenticated/auth/vscode-link': typeof AuthenticatedAuthVscodeLinkRoute
  '/_authenticated/_base/_settings/account': typeof AuthenticatedBaseSettingsAccountRoute
  '/_authenticated/_base/_settings/billing': typeof AuthenticatedBaseSettingsBillingRoute
  '/_authenticated/_base/_settings/integrations': typeof AuthenticatedBaseSettingsIntegrationsRoute
  '/_authenticated/_base/_settings/model': typeof AuthenticatedBaseSettingsModelRoute
  '/_authenticated/_base/tasks/$uid': typeof AuthenticatedBaseTasksUidRoute
  '/_authenticated/_base/teams/$slug': typeof AuthenticatedBaseTeamsSlugRoute
  '/_authenticated/_base/minions/': typeof AuthenticatedBaseMinionsIndexRoute
  '/_authenticated/_base/tasks/': typeof AuthenticatedBaseTasksIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/privacy-policy'
    | '/redirect-url'
    | '/term-of-service'
    | '/admin'
    | '/accept-invitation'
    | '/redirect-remote'
    | '/redirect-vscode'
    | '/stop-impersonating'
    | '/auth/$pathname'
    | '/clip/$id'
    | '/clip/new'
    | '/share/$uid'
    | '/create'
    | '/home'
    | '/leaderboard'
    | '/profile'
    | '/team'
    | '/admin/model-evaluation'
    | '/admin/users'
    | '/auth/device-link'
    | '/auth/vscode-link'
    | '/account'
    | '/billing'
    | '/integrations'
    | '/model'
    | '/tasks/$uid'
    | '/teams/$slug'
    | '/minions'
    | '/tasks'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/privacy-policy'
    | '/redirect-url'
    | '/term-of-service'
    | '/admin'
    | '/accept-invitation'
    | '/redirect-remote'
    | '/redirect-vscode'
    | '/stop-impersonating'
    | '/auth/$pathname'
    | '/clip/$id'
    | '/clip/new'
    | '/share/$uid'
    | '/create'
    | '/home'
    | '/leaderboard'
    | '/profile'
    | '/team'
    | '/admin/model-evaluation'
    | '/admin/users'
    | '/auth/device-link'
    | '/auth/vscode-link'
    | '/account'
    | '/billing'
    | '/integrations'
    | '/model'
    | '/tasks/$uid'
    | '/teams/$slug'
    | '/minions'
    | '/tasks'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/privacy-policy'
    | '/redirect-url'
    | '/term-of-service'
    | '/_authenticated/_base'
    | '/_authenticated/admin'
    | '/_authenticated/accept-invitation'
    | '/_authenticated/redirect-remote'
    | '/_authenticated/redirect-vscode'
    | '/_authenticated/stop-impersonating'
    | '/auth/$pathname'
    | '/clip/$id'
    | '/clip/new'
    | '/share/$uid'
    | '/_authenticated/_base/_settings'
    | '/_authenticated/_base/create'
    | '/_authenticated/_base/home'
    | '/_authenticated/_base/leaderboard'
    | '/_authenticated/_base/profile'
    | '/_authenticated/_base/team'
    | '/_authenticated/admin/model-evaluation'
    | '/_authenticated/admin/users'
    | '/_authenticated/auth/device-link'
    | '/_authenticated/auth/vscode-link'
    | '/_authenticated/_base/_settings/account'
    | '/_authenticated/_base/_settings/billing'
    | '/_authenticated/_base/_settings/integrations'
    | '/_authenticated/_base/_settings/model'
    | '/_authenticated/_base/tasks/$uid'
    | '/_authenticated/_base/teams/$slug'
    | '/_authenticated/_base/minions/'
    | '/_authenticated/_base/tasks/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute
  RedirectUrlRoute: typeof RedirectUrlRoute
  TermOfServiceRoute: typeof TermOfServiceRoute
  AuthPathnameRoute: typeof AuthPathnameRoute
  ClipIdRoute: typeof ClipIdRoute
  ClipNewRoute: typeof ClipNewRoute
  ShareUidRoute: typeof ShareUidRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  RedirectUrlRoute: RedirectUrlRoute,
  TermOfServiceRoute: TermOfServiceRoute,
  AuthPathnameRoute: AuthPathnameRoute,
  ClipIdRoute: ClipIdRoute,
  ClipNewRoute: ClipNewRoute,
  ShareUidRoute: ShareUidRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/privacy-policy",
        "/redirect-url",
        "/term-of-service",
        "/auth/$pathname",
        "/clip/$id",
        "/clip/new",
        "/share/$uid"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/_base",
        "/_authenticated/admin",
        "/_authenticated/accept-invitation",
        "/_authenticated/redirect-remote",
        "/_authenticated/redirect-vscode",
        "/_authenticated/stop-impersonating",
        "/_authenticated/auth/device-link",
        "/_authenticated/auth/vscode-link"
      ]
    },
    "/privacy-policy": {
      "filePath": "privacy-policy.tsx"
    },
    "/redirect-url": {
      "filePath": "redirect-url.tsx"
    },
    "/term-of-service": {
      "filePath": "term-of-service.tsx"
    },
    "/_authenticated/_base": {
      "filePath": "_authenticated._base/route.tsx",
      "parent": "/_authenticated",
      "children": [
        "/_authenticated/_base/_settings",
        "/_authenticated/_base/create",
        "/_authenticated/_base/home",
        "/_authenticated/_base/leaderboard",
        "/_authenticated/_base/profile",
        "/_authenticated/_base/team",
        "/_authenticated/_base/tasks/$uid",
        "/_authenticated/_base/teams/$slug",
        "/_authenticated/_base/minions/",
        "/_authenticated/_base/tasks/"
      ]
    },
    "/_authenticated/admin": {
      "filePath": "_authenticated.admin/route.tsx",
      "parent": "/_authenticated",
      "children": [
        "/_authenticated/admin/model-evaluation",
        "/_authenticated/admin/users"
      ]
    },
    "/_authenticated/accept-invitation": {
      "filePath": "_authenticated.accept-invitation.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/redirect-remote": {
      "filePath": "_authenticated.redirect-remote.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/redirect-vscode": {
      "filePath": "_authenticated.redirect-vscode.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/stop-impersonating": {
      "filePath": "_authenticated.stop-impersonating.tsx",
      "parent": "/_authenticated"
    },
    "/auth/$pathname": {
      "filePath": "auth/$pathname.tsx"
    },
    "/clip/$id": {
      "filePath": "clip/$id.tsx"
    },
    "/clip/new": {
      "filePath": "clip/new.tsx"
    },
    "/share/$uid": {
      "filePath": "share.$uid.tsx"
    },
    "/_authenticated/_base/_settings": {
      "filePath": "_authenticated._base/_settings/route.tsx",
      "parent": "/_authenticated/_base",
      "children": [
        "/_authenticated/_base/_settings/account",
        "/_authenticated/_base/_settings/billing",
        "/_authenticated/_base/_settings/integrations",
        "/_authenticated/_base/_settings/model"
      ]
    },
    "/_authenticated/_base/create": {
      "filePath": "_authenticated._base/create.tsx",
      "parent": "/_authenticated/_base"
    },
    "/_authenticated/_base/home": {
      "filePath": "_authenticated._base/home.tsx",
      "parent": "/_authenticated/_base"
    },
    "/_authenticated/_base/leaderboard": {
      "filePath": "_authenticated._base/leaderboard.tsx",
      "parent": "/_authenticated/_base"
    },
    "/_authenticated/_base/profile": {
      "filePath": "_authenticated._base/profile.tsx",
      "parent": "/_authenticated/_base"
    },
    "/_authenticated/_base/team": {
      "filePath": "_authenticated._base/team.tsx",
      "parent": "/_authenticated/_base"
    },
    "/_authenticated/admin/model-evaluation": {
      "filePath": "_authenticated.admin/model-evaluation.tsx",
      "parent": "/_authenticated/admin"
    },
    "/_authenticated/admin/users": {
      "filePath": "_authenticated.admin/users.tsx",
      "parent": "/_authenticated/admin"
    },
    "/_authenticated/auth/device-link": {
      "filePath": "_authenticated.auth/device-link.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/auth/vscode-link": {
      "filePath": "_authenticated.auth/vscode-link.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/_base/_settings/account": {
      "filePath": "_authenticated._base/_settings/account.tsx",
      "parent": "/_authenticated/_base/_settings"
    },
    "/_authenticated/_base/_settings/billing": {
      "filePath": "_authenticated._base/_settings/billing.tsx",
      "parent": "/_authenticated/_base/_settings"
    },
    "/_authenticated/_base/_settings/integrations": {
      "filePath": "_authenticated._base/_settings/integrations.tsx",
      "parent": "/_authenticated/_base/_settings"
    },
    "/_authenticated/_base/_settings/model": {
      "filePath": "_authenticated._base/_settings/model.tsx",
      "parent": "/_authenticated/_base/_settings"
    },
    "/_authenticated/_base/tasks/$uid": {
      "filePath": "_authenticated._base/tasks/$uid.tsx",
      "parent": "/_authenticated/_base"
    },
    "/_authenticated/_base/teams/$slug": {
      "filePath": "_authenticated._base/teams/$slug.tsx",
      "parent": "/_authenticated/_base"
    },
    "/_authenticated/_base/minions/": {
      "filePath": "_authenticated._base/minions/index.tsx",
      "parent": "/_authenticated/_base"
    },
    "/_authenticated/_base/tasks/": {
      "filePath": "_authenticated._base/tasks/index.tsx",
      "parent": "/_authenticated/_base"
    }
  }
}
ROUTE_MANIFEST_END */
